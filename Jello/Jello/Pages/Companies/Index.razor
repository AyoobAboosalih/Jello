@page "/companies"

@using Jello.Data

@inject NavigationManager Navigator

@inject ICompanyModel CompanyModel


<MudPaper Class="pa-10 ma-2" Elevation="3">
    <MudText Class="ma-2" Typo="Typo.h3">Companies
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Link="/companies/create">Add Company</MudButton>
    </MudText>
    
    <MudDivider />
    @if (companies is null)
    {
        <p><em>Loading... !</em></p>
    }
    else
    {
        <MudGrid Class="pa-5 ma-2" Justify="Justify.FlexStart">
            @foreach (var company in companies)
            {
                <MudItem xs="4">
                    <MudCard Class="pa-2" Elevation="25">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@company.Name</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudDivider />
                        <MudCardActions>
                            <a href="/companies/details/@company.Id">
                                <MudButton Class="pa-2 ma-2" Variant="Variant.Filled" >View</MudButton>
                            </a>
                            <a href="/companies/edit/@company.Id">
                                <MudFab Class="pa-2 ma-2" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                            </a>
                            <a href="/companies/delete/@company.Id">
                                <MudFab Class="pa-2 ma-2" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
                            </a>

                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }

        </MudGrid>
    }

</MudPaper>

@code {

    List<Company> companies;

    protected override async void OnInitialized()
    {
        GetCompanies();
    }

    private List<Company> GetCompanies()
    {
        companies = CompanyModel.GetCompanies();
        return companies;
    }



}
